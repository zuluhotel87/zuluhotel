/*
        Maintened by *Edwards
        
        2008-12-12
        
        Last Modifications 2009-10-25
             * Fixed Target() so we can target anything
             * Cleaned codes for better performances
        
        Original Idea from ZuluHotel thanks a lot!!
*/
use uo;
use os;
use util;

include "include/client";
include "include/itemUtil";
include "include/landtiles";
include ":attributes:attributes";
include ":brainai:npcUtil";
include ":crafting:crafting";

var craft_config := ReadConfigFile( ":*:itemdesc" );

program use_Bladed( mobile, tool )

       	if( !useItem_check( mobile, tool, DEFAULT_ITEM ))
		return 0;
	endif

	SendSysMessage( mobile, "What would you like to use that on?" );
	var targ := TargetCoordinates( mobile );
	if( !targ )
		SendSysMessage( mobile, "Cancelled." );
		return 0;
	endif
            
        if( craft_config[targ.objtype].Projectile )
                Use_onBow( mobile, tool, targ.item );
	elseif( targ.item.IsCorpse() )
		CarveCorpse( mobile, targ.item );
        elseif( IsTree( targ.objtype ))
                CarveTree( mobile, tool, targ );
        elseif( targ.item.IsFish() )
                CarveFish( mobile, tool, targ.item );
        elseif( targ.item.IsLog() )
                Use_onWood( mobile, tool, targ.item );
        else
                SendSysMessage( mobile, "You can't do anything with that!" );
                return 0;
	endif
        
        return 1;
endprogram

function CarveCorpse( mobile, corpse )

        var template := GetObjProperty( corpse, "npctemplate" );
        
        if( corpse.IsSkinned() )
		SendSysMessage( mobile, "That has already been skinned." );
		return 0;
        elseif( GetObjProperty( corpse, "SummonedBy" ))
		SendSysMessage( mobile, "You cannot carve up this corpse." );
		return 0;
	elseif( template )
		var cfg_elem := NPC_GetNPCConfig( template );
		foreach entry in ( GetConfigStringArray( cfg_elem, "SkinningItem" ))
			entry := SplitWords( entry );
   
			CreateItemInContainer( mobile.backpack, entry[1], CInt( entry[2] ));
			SleepMS(2);
		endforeach
	        SetObjProperty( corpse, "Skinned", mobile.serial );
	else
                var owner := SystemFindObjectBySerial( GetObjProperty( corpse, "ownerserial" ));
                if( !owner.criminal || !owner.murderer )
                	SendSysMessage( mobile, "You have carved a blue corpse and have been flagged criminal. Guards can now be called on you." );
                	mobile.SetCriminal(1);
                endif
                
                var head := CreateItemInContainer( mobile.backpack, 0x1dae, 1 );
                if( head.errortext )
                	SendSysMessage( mobile, "Error creating head in mobile backpack -->"+head.errortext );
                	return 0;
                endif
                
                SetObjProperty( head, "Serial", corpse.GetOwner().serial );
                SetName( head, "a head of "+corpse.GetOwner().name );
	endif

        corpse.SetSkinned( mobile.serial );
	SendSysMessage( mobile, "You carve the corpse." );

	return 1;
endfunction

function CarveTree( mobile, tool, tree )

        EquipItem( mobile, tool );
       	if( !useItem_check( mobile, tool, ITEM_EQUIPPED ))
		return 0;
	endif
 
        if( CoordinateDistance( mobile.x, mobile.y, tree.x, tree.y ) > 2 )
                SendSysMessage( mobile, "This is too far away." );
                return 0;
        endif

        var wood_amount := HarvestResource( "wood", tree.x, tree.y, 1, 1 );
        if( !wood_amount )
                SendSysMessage( mobile, "There's no more wood left there." );
                return 0;
        endif
        
        if( SkillCheck( mobile, CAMPING, -1, "", ADV_DISABLE ) > 0 )
		CreateItemInBackpack( mobile, 0xde1, 1 );
		SendSysMessage( mobile, "You chip off some kindling and put it in your backpack." );
	else
		SendSysMessage( mobile, "You fail and get no wood at all." );
	endif
        
	return 1;
endfunction

function CarveFish( mobile, tool, fish )

        EquipItem( mobile, tool );
       	if( !useItem_check( mobile, tool, ITEM_EQUIPPED ))
		return 0;
	elseif( !useItem_check( mobile, fish, ITEM_INCONTAINER ))
		return 0;
	endif
            
        PlaySoundEffect( mobile, 0x0057 );
        PerformAction( mobile, ANIM_SALUTE );
        
        var amount := fish.amount;
        
        var created := CreateItemInBackpack( mobile, 0x097a, amount );
        if( created.errortext )
                SendSysMessage( mobile, "Error creating fish -->"+created.errortext );
                return 0;
        endif
            
	DestroyItem( fish );
        SendSysMessage( mobile, "You carve the fish and put "+amount+" steak(s) in your backpack." );
        
	return 1;
endfunction

function Use_onWood( mobile, tool, targ )

        EquipItem( mobile, tool );
       	if( !useItem_check( mobile, tool, ITEM_EQUIPPED ))
		return 0;
	endif
 
	var rtype := craft_config[targ.objtype].Type,
	    diff := craft_config[targ.objtype].Difficulty;

	if( !useItem_check( mobile, targ, ITEM_INCONTAINER ))
		return 0;
	elseif( rtype != "wood" )
		SendSysMessage( mobile, "That's not the proper material." );
                return 0;
      	elseif( !canUseMaterial( mobile, BOWCRAFT_FLETCHING, diff ))
		SendSysMessage( mobile, "You are not skilled enough to make anything out of that." );
		return 0;
	endif

	var start := Start_Script( ":bowcraft:bowcraft", {mobile, tool, targ} );
        if( start.errortext )
                SendSysMessage( mobile, "Error starting script <:bowcraft:bowcraft> -->"+start.errortext );
                return 0;
        endif

	return 1;
endfunction

function Use_onBow( mobile, tool, targ )

        EquipItem( mobile, tool );
       	if( !useItem_check( mobile, tool, ITEM_EQUIPPED ))
		return 0;
        endif
        
        RepairItem( mobile, BOWCRAFT_FLETCHING, targ );
        
	return 1;
endfunction
