/*
        Made by *Edwards
        08-02-2008

        Updated 2008-08-31

        Last Modifications 2009-10-22
             * Cleaned codes for better performances

        Thanks to Zulu and his developers for these awesome ideas...
*/
use uo;
use os;
use util;

include ":damage:damage";
include ":brainAI:npcUtil";

program HitScript_SpellStrike( parms )

        var attacker       := parms[1];
	var defender       := parms[2];
	var weaponAttacker := parms[3];
        var rawDamage      := parms[4];

        var cursed := GetObjProperty( weaponAttacker, "Cursed" );
        if( cursed )
		defender := attacker;
        endif
        
        var spellid,
            chance;
            
        if( attacker.IsA( POLCLASS_NPC ))
                var npc := NPC_GetNPCConfig( attacker.npctemplate );
	        spellid := npc.HitWithSpell;
                chance := npc.ChanceOfEffect;
        else
	        spellid := GetObjProperty( weaponAttacker, "HitWithSpell" );
                if( spellid.errortext )
                        SendSysMessage( attacker, "Unable to read spell type -> "+spellid.errortext );
                endif

                if( spellid == "Random" )
                        var poss_ids := array{1, 3, 5, 8, 12, 18, 27, 30, 31, 37,
                                          38, 42, 43, 46, 49, 51, 55, 57};

                        spellid := poss_ids.RandomEntry();
                endif

                chance := GetObjProperty( weaponAttacker, "ChanceOfEffect" );
                if( !chance )
                        chance := 10;
                endif
        endif
        
	if( RandomDiceRoll("1d100") <= CInt( chance ))
                var script := start_script( ":magery:spellstarter", array{attacker, spellid, 1, defender, 1, 1, 1, 1, 1} );
                if( script.errortext )
                        SendSysMessage( attacker, "Error starting <:magery:spellstarter> --> "+script.errortext );
                endif
	endif

        ApplyDamageEX( defender, rawDamage, DMG_PHYSICAL, attacker );
        
        return 1;
endprogram
