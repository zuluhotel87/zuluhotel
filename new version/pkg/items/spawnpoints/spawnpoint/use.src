/*
        Created by *Edwards

        2009-04-11

        SpawnPoint manager made for Administrator Gambit.
        Thanks PolDistro095 Team
*/
use uo;
use os;
use basic;

include "include/security";
include ":brainAI:createNPC";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":spawnpoints:manager";
include ":spawnpoints:settings";
include ":spawnpoints:spawnpoints";

var the_template := "";

program use_spawnPoint( mobile, spawnpoint )

        if( mobile.cmdlevel < 2 )
                 spawnpoint.invisible := 1;
                 return 0;
        elseif( !AuthorizationCode( mobile ))
                 spawnpoint.invisible := 1;
                 return 0;
        endif

        while( Send_Command( mobile, spawnpoint ))
                SleepMS(500);
        endwhile
        
        EraseObjProperty( spawnpoint, "#NextSpawn" );
        EraseObjProperty( spawnpoint, "#SpawnpointDelay" );

        SendSysMessage( mobile, "Spawnpoint initialized." );
        spawnpoint.invisible := 1;

        SetObjProperty( spawnpoint, "LFucker", mobile.serial );
        
        Sleep(2);
        
        DespawnAll( spawnpoint );
        SPM_SendCommand( EVENT_SPAWNPOINT_CHECK, spawnpoint );

        return 1;
endprogram

function Send_Command( mobile, spawnpoint )

        var sp_settings := GetSpawnpointSettings( spawnpoint );

        //Initialize the gump
        var gump := GFCreateGump();

        //Load Main Background
	GFResizePic( gump, 0, 0, GFGetCfgConst( "Defaults", "BackGround" ), 250, 425 );

        GFResizePic( gump, 15, 15, GFGetCfgConst( "Defaults", "ForeGround" ), 220, 25 );
	GFTextMid( gump, 15, 17, 270, 1720, "FS Spawnpoint Manager" );

        //BackgroundAreas
	GFResizePic( gump, 15, 45, GFGetCfgConst( "Defaults", "ForeGround" ), 220, 370 );
        GFTextMid( gump, 15, 60, 250, 1720, "Main Menu" );
        
        GFTextLine( gump, 50, 100, 1720, "Type:" );

        var npc_value := 0;
        if( sp_settings[1] == "NPC" )
                npc_value := 1;
        endif
        GFTextLine( gump, 130, 100, 1153, "NPC" );
        GFRadioButton( gump, 90, 100, 210, 211, npc_value, 0xA01 );

        var group_value := 0;
        if( sp_settings[1] == "Group" )
                group_value := 1;
        endif
        GFTextLine( gump, 130, 120, 1153, "Group" );
        GFRadioButton( gump, 90, 120, 210, 211, group_value, 0xA02 );

        var item_value := 0;
        if( sp_settings[1] == "Item" )
                item_value := 1;
        endif
        GFTextLine( gump, 130, 140, 1153, "Item" );
        GFRadioButton( gump, 90, 140, 210, 211, item_value, 0xA03 );

        var container_value := 0;
        if( sp_settings[1] == "Container" )
                container_value := 1;
        endif
        GFTextLine( gump, 130, 160, 1153, "Container" );
        GFRadioButton( gump, 90, 160, 210, 211, container_value, 0xA04 );

        if( !the_template || the_template == "nil" )
                the_template := sp_settings[2];
        endif
        
        GFTextLine( gump, 50, 180, 1720, "Template:" );
        GFAddButton( gump, 130, 180, 2117, 2118, GF_CLOSE_BTN, 0xA05 );
        GFResizePic( gump, 50, 200, GFGetCfgConst( "BackGrounds", "GOLDTRIM" ), 170, 30 );
	var template_entry := GFTextEntry( gump, 60, 205, 160, 20, 1153, the_template, 0xA06 );

        GFTextLine( gump, 50, 240, 1720, "Amount:" );
        GFResizePic( gump, 170, 240, GFGetCfgConst( "BackGrounds", "GOLDTRIM" ), 50, 30 );
	var amount_entry := GFTextEntry( gump, 180, 245, 160, 20, 1153, sp_settings[3], 0xA07 );
 
        GFTextLine( gump, 50, 260, 1720, "Appeir Range:" );
        GFResizePic( gump, 170, 260, GFGetCfgConst( "BackGrounds", "GOLDTRIM" ), 50, 30 );
	var range_entry := GFTextEntry( gump, 180, 265, 160, 20, 1153, sp_settings[4], 0xA08 );
 
        GFTextLine( gump, 50, 280, 1720, "Wander Range:" );
        GFResizePic( gump, 170, 280, GFGetCfgConst( "BackGrounds", "GOLDTRIM" ), 50, 30 );
	var wander_entry := GFTextEntry( gump, 180, 285, 160, 20, 1153, sp_settings[5], 0xA09 );
 
        GFTextLine( gump, 50, 300, 1720, "Frequency:" );
        GFResizePic( gump, 170, 300, GFGetCfgConst( "BackGrounds", "GOLDTRIM" ), 50, 30 );
	var frequency_entry := GFTextEntry( gump, 180, 305, 160, 20, 1153, sp_settings[6], 0xA0A );
 
        GFTextLine( gump, 50, 320, 1720, "Notes:" );
        GFResizePic( gump, 50, 340, GFGetCfgConst( "BackGrounds", "GOLDTRIM" ), 170, 70 );
	var notes_entry := GFTextEntry( gump, 60, 345, 150, 70, 1153, sp_settings[8], 0xA0B );

        //And now we need to know the answer...
        var input := GFSendGump( mobile, gump );
        if( !input )
                SendSysMessage( mobile, "Cancelled." );
                return 0;
        endif
        
        sp_settings[2] := CStr( GFExtractData( input, template_entry ));
        
        sp_settings[3] := CInt( GFExtractData( input, amount_entry ));
        if( sp_settings[3] < 1 )
                sp_settings[3] := 1;
        elseif( sp_settings[3] > 50 )
                sp_settings[3] := 50;
        endif
        
        sp_settings[4] := CInt( GFExtractData( input, range_entry ));
        if( sp_settings[4] < 0 )
                sp_settings[4] := 0;
        elseif( sp_settings[4] > 100 )
                sp_settings[4] := 100;
        endif
        
        sp_settings[5] := CInt( GFExtractData( input, wander_entry ));
        if( sp_settings[5] < 0 )
                sp_settings[5] := 0;
        elseif( sp_settings[5] > 20 )
                sp_settings[5] := 20;
        endif
        
        sp_settings[6] := CInt( GFExtractData( input, frequency_entry ));
        if( sp_settings[6] < 1 )
                sp_settings[6] := 1;
        elseif( sp_settings[6] > 500 )
                sp_settings[6] := 500;
        endif
        
        sp_settings[8] := CStr( GFExtractData( input, notes_entry ));
        if( Len( sp_settings[8] ) < 1 )
                sp_settings[8] := "no notes";
        endif
        
        foreach key in ( input.keys )
                if( key == 0xA01 )
                        sp_settings[1] := "NPC";
                        break;
                elseif( key == 0xA02 )
                        sp_settings[1] := "Group";
                        break;
                elseif( key == 0xA03 )
                        sp_settings[1] := "Item";
                        break;
                elseif( key == 0xA04 )
                        sp_settings[1] := "Container";
                        break;
                endif
                
                SleepMS(5);
        endforeach
        
        SetObjProperty( spawnpoint, "Settings", sp_settings );
        
        SetName( spawnpoint, "Spawnpoint: "+sp_settings[2]+" ["+sp_settings[3]+"]" );
        
        if( input[0xA05] )
                if( sp_settings[1] == "NPC" )
                        the_template := SelectTemplateFromGump( mobile );
                elseif( sp_settings[1] == "Group" )
                        the_template := SelectGroupFromGump( mobile );
                else
                        SendSysMessage( mobile, "You cannot select that option with the engine used." );
                endif
                return 1;
        endif

        return 0;
endfunction

function SelectGroupFromGump( mobile )

        var group_cfg := ReadConfigFile( ":spawnsystem:defaultGroups" );
        if( group_cfg.errortext )
		SendSysMessage( mobile, "Error reading <:spawnsystem:defaultGroups> -->"+group_cfg.errortext );
                return 0;
        endif

        var gump := GFCreateGump();

	GFPage( gump, 0 );
	GFResizePic( gump, 0, 0, GFGetCfgConst( "Defaults", "BackGround" ), 300, 480 );
	GFResizePic( gump, 15, 15, GFGetCfgConst( "Defaults", "ForeGround" ), 270, 450 );

	GFTextMid( gump, 15, 30, 280, 2100, "NPC Categories" );

	GFAddButton( gump, 30, 430, 4002, 4003, GF_CLOSE_BTN, 0xA1 );
	GFTextLine( gump, 65, 430, 2100, "Unload" );

        var group_list := GetConfigStringKeys( group_cfg );

        var y_pos := 60;
	var counter := 1;

	GFPage( gump, 1 );
	foreach group_name in ( group_list )

                var cfg_elem := FindConfigElem( group_cfg, group_name );
                if( GetConfigString( cfg_elem, "Engine" ) == "npcFill" )
			GFAddButton( gump, 35, y_pos+3, 2117, 2118, GF_CLOSE_BTN, ( _group_name_iter ));
			GFTextLine( gump, 55, y_pos, 2100, group_name );

			y_pos += 20;
			counter += 1;
                endif

		if( counter > 18 )
			counter := 1;
			y_pos := 60;
			GFAddButton( gump, 252, 430, 2648, 2649, GF_PAGE_BTN, gump.cur_page+1 );
			GFPage( gump, gump.cur_page+1 );
			GFAddButton( gump, 252, 30, 2650, 2651, GF_PAGE_BTN, gump.cur_page-1 );
		endif
		SleepMS(2);
	endforeach

        var input := GFSendGump( mobile, gump );
        if( !input )
                SendSysMessage( mobile, "Cancelled." );
                return 0;
        elseif( input[0xA1] )
                UnloadConfigFile( ":spawnsystem:defaultGroups" );
                SendSysMessage( mobile, "Unloading :spawnsystem:defaultGroups" );
                return 0;
        endif

        input := input[0];

        return group_list[input];
endfunction
