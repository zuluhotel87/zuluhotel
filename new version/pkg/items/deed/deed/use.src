/*
        Maintened by *Edwards
        
        2008-12-27

        Last Modifications 2009-07-31
             * Added useItem_check()

        Last Modifications 2009-11-18
             * Added positionning option ( east-west-north-south ) via menu
*/
use uo;
use os;
use cfgfile;

include "include/itemUtil";
include "include/string";
include ":containers:containers";
include ":gumps:yesno";
include ":keys:key";

const CANCEL_ID := 999;

var permuting := 0;
var opposing  := 0;

program place_deed( who, deed )
 
	var item_cfg := ReadConfigFile( ":deed:itemdesc" ),
	    element := FindConfigElem( item_cfg, deed.objtype ),
	    items := SplitWords( element.ObjList ),
            mode := 0;
 
	if( !useItem_check( who, deed, ITEM_INCONTAINER ))
		return 0;
	elseif( !element )
		SendSysMessage( who, "You can't make anything out of this deed." );
		return 0;
	elseif( !Len( items ))
		SendSysMessage( who, "You can't make anything out of this deed." );
		return 0;
	endif

        var house := who.multi;
        if( who.cmdlevel < 3 )
                if( !house )
			SendSysMessage( who, "You must be in your house to place the item." );
			return 0;
                elseif( !house.CanCommand( who ))
			SendSysMessage( who, "You do not have privileges to place the item here." );
			return 0;
                endif
        endif

	SendSysMessage( who, "Where do you want to create the item?" );
	var start := TargetCoordinates( who );
	if( !start )
		SendSysMessage( who, "Cancelled." );
		return 0;
	elseif( !CheckLosAt( who, CInt( start.x ), CInt( start.y ), CInt( start.z )))
		SendSysMessage( who, "You can't see that." );
		return 0;
	elseif( !start.multi && who.cmdlevel < 3 )
		SendSysMessage( who, "You must place that in a house." );
		return 0;
	endif
 
	var mult_ori := element.MultOrientation;
        if( mult_ori )
                var face_ids := SplitWords( element.FaceIds );

                mode := MakeAndProcessMenu( who, face_ids, items[1] );
                if( mode == CANCEL_ID )
			SendSysMessage( who, "Cancelled." );
			return 0;
                endif
        endif

	var movable := element.ObjMovable,
	    is_except  := GetObjProperty( deed, "Exceptional" ),
            is_ided := GetObjProperty( deed, "IDed" ),
	    x_mods := SplitWords( element.ObjXMod ),
	    y_mods := SplitWords( element.ObjYMod ),
	    z_mods := SplitWords( element.ObjZMod ),
	    created := {},
	    the_serials	:= {},
	    failed,
            i;
            
	if( permuting )
		x_mods := SplitWords( element.ObjYMod );
		y_mods := SplitWords( element.ObjXMod );
	endif

	for( i:=1; i<=Len( items ); i+=1 )
 
		var obj := CInt( items[i] ) + mode,
		    x_mod := CInt( x_mods[i] ),
		    y_mod := CInt( y_mods[i] ),
		    z_mod := CInt( z_mods[i] );

		if( opposing )
			x_mod := 0 - x_mod;
			y_mod := 0 - y_mod;
		endif

		var the_item := CreateItemAtLocation( start.x + x_mod, start.y + y_mod, start.z + z_mod, obj, 1, start.realm );
		if( !the_item )
  
			foreach thing in created
				DestroyItem( thing );
                                SleepMS(5);
			endforeach
   
			DestroyItem( the_item );
			failed := 1;
			break;
		endif

		the_item.decayAt := 0;
                the_item.color := CInt( deed.color );
  
                var iname := GetObjProperty( deed, "IName" );
		if( iname )
			SetName( the_item, AddArticle( iname+" "+TruncateArticle( the_item.desc )));
			SetObjProperty( the_item, "IName", iname );
  		endif
  
		if( is_except )
                        var type := GetObjProperty( deed, "ExceptionalType" );
			SetObjProperty( the_item, "ExceptionalType", type );
			SetObjProperty( the_item, "Exceptional", is_except );
		endif
  
                if( is_ided )
                	SetObjProperty( the_item, "IDed", is_ided );
                endif
  
		if( !movable )
			the_item.movable := 0;
		else
			the_item.movable := 1;
		endif

		if( KP_IsLockable( the_item ))
   
                        var lockpick_level := CInt( GetObjProperty( the_item, "ByTrueCrafter" ));
                        if( !lockpick_level )
                        	lockpick_level := 1;
                        endif
                        
			SetObjProperty( the_item, "LockLevel", lockpick_level );
		endif
  
		created.Append( the_item );
		the_serials.Append( the_item.serial );
  
		SleepMS(2);
	endfor

	if( failed == 1 )
		SendSysMessage( who, "Could not build that there." );
		return 0;
	elseif( failed == 2 )
		SendSysMessage( who, "You may only place this in a house you own." );
		return 0;
	endif
 
	if( YesNo( who, "Placed well?" ))
                
		foreach part in created
			if( part.IsKey() )
                                continue;
                        endif
                        
			SetObjProperty( part, "DeedObjType", deed.objtype );
			SetObjProperty( part, "DeedOwnerSerial", who.serial );
			SetObjProperty( part, "ItemsCreatedSerials", the_serials );
			SetObjProperty( part, "furniture", 1 );
   
			SleepMS(5);
		endforeach
  
                DestroyItem( deed );
	else
		destroy_parts( created );
		SendSysMessage( who, "Cancelled." );
	endif

	return 1;
endprogram

function destroy_parts( created )

	foreach part in created
		DestroyItem( part );
		SleepMS(5);
	endforeach
 
        return 1;
endfunction

function MakeAndProcessMenu( who, face_ids, base_objtype )

	var menu := CreateMenu( "Choose an orientation" );

	var i;
	for( i:=1; i<=Len( face_ids ); i+=1 )
 
		var label := "";
		if( Len( face_ids ) <= 4 )
			case( i )
				1:	label := "South";
					break;

				2:	label := "East";
					break;

				3:	label := "North";
					break;

				4:	label := "West";
					break;
			endcase
		endif

		AddMenuItem( menu, CInt( CInt( base_objtype ) + CInt( face_ids[i] )), label );
	endfor

	var choice := SelectMenuItem2( who, menu ).Index;
	if( !choice )
		return CANCEL_ID;
	endif

	if( !( choice % 2 ))
		permuting := 1;
	endif

	if( !( choice % 4 ))
		opposing := 1;
	elseif( !(( choice + 1 ) % 4 ))
		opposing := 1;
	endif

	return CInt( face_ids[choice] );
endfunction
