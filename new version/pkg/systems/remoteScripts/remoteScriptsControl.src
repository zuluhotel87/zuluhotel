/*
        Created by *Edwards

        2011-04-13
*/
use uo;
use os;
use polsys;
use basic;
use util;

include ":remoteScripts:settings";
include ":security:report";

program RemoveScriptsControl( mobile )

        var system_pid := GetGlobalProperty( "#RemoteScriptsControlPID" );
        if( GetProcess( system_pid ))
                //Old system is already running.
		return 0;
        endif
        
	SetObjProperty( mobile, "#RemoteScriptsControlPID", GetPid() );

	while( 1 )
                var rs_scripts := RS_GetScripts();
                if( rs_scripts.Size() < 0 )
                	//No scripts has to be run
                return 0;
                endif
                
		foreach script_elem in rs_scripts
        		SleepMS(5);
          
                	var cfg_elem := RS_GetSettingsCfgElem( script_elem );
                	if( CheckScriptTickle( cfg_elem ))
				var script_path := cfg_elem.Path;
                		var script := Start_Script( script_path );
                		if( script.errortext )
                        		ReportText( "Error starting script <"+script_path+"> -->"+script.errortext, REPORT_SYSLOG );
                                        continue;
                		endif
                        endif
		endforeach

                Sleep( 60 );
	endwhile

	return 1;
endprogram

function CheckScriptTickle( cfg_elem )

         var time_parsed := ParseServerTime(),
             script_type := cfg_elem.Type,
             script_time := cfg_elem.Time;

         if( Find( script_type, "h", 0 )) // Daily
                  var type_format := ParseElemTime( script_type );
                  if( type_format.hour != time_parsed.hour )
                           return 0;
                  elseif( type_format.minute != time_parsed.minute )
                           return 0;
                  endif
         elseif( TypeOf( script_type ) == "String" ) // Weekly
                  if( Lower( script_type ) != time_parsed.weekday )
                           return 0;
                  endif
                  
                  var type_format := ParseElemTime( script_time );
                  if( type_format.hour != time_parsed.hour )
                           return 0;
                  elseif( type_format.minute != time_parsed.minute )
                           return 0;
                  endif
         elseif( TypeOf( script_type ) == "Integer" ) //Monthly
                  if( CInt( script_type ) != time_parsed.day )
                           return 0;
                  endif
                  
                  var type_format := ParseElemTime( script_time );
                  if( type_format.hour != time_parsed.hour )
                           return 0;
                  elseif( type_format.minute != time_parsed.minute )
                           return 0;
                  endif
         endif
         
         return 1;
endfunction

function ParseElemTime( time_format )

         var time_hour := CInt( time_format[1, 2] ),
             time_minute := CInt( time_format[4, 5] );
             
         var time_parsed := struct{};
             time_parsed.+hour := time_hour;
             time_parsed.+minute := time_minute;
             
         return time_parsed;
endfunction

function ParseServerTime()

        var time := CInt( POLCore().systime );

        var time_parsed := struct{};
            time_parsed.+day := CInt( StrFormatTime( "%d", time ));
            time_parsed.+hour := CInt( StrFormatTime( "%H", time ));
            time_parsed.+minute := CInt( StrFormatTime( "%M", time ));
            time_parsed.+weekday := Lower( StrFormatTime( "%A", time ));
            
        return time_parsed;
endfunction
