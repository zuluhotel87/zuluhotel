/*
        Maintened by *Edwards

        2009-02-10
        
        Last Modifications 2009-09-30
             * Removed "Dangerous Area" abilities
             * Added Difficulty in regions for resist and ar bonus
             * Fixed when spawning multiple creatures on same coords
*/
use uo;
use os;

include ":attributes:attributes";
include ":spawnsystem:groups";
include ":spawnsystem:regions";
include ":spawnsystem:settings";
include ":spawnsystem:spawnerUtil";
include ":security:report";

program SpawnCycle( params )

	//var engine_name	:= params[1];
	var realm_name	:= params[2];
	var region_name	:= params[3];
	var group_name	:= params[4];
	params := 0; // Not needed anymore.

	ValidateSpawns( region_name, group_name );
 
	var group_settings := SS_GetGroupInRegion( region_name, group_name ),
	    max_amt := CInt( group_settings.max_amt ),
	    cur_amount := CInt( SS_GetSpawnsInRegionGroup( region_name, group_name ).Size() );
        
        if( CInt( group_settings.enabled ) != 1 )
                return 0;
        elseif( cur_amount >= max_amt )
                return 0;
        endif

        var cfg_file := SS_GetSettingsCfgFile(),
            glob_settings := SS_GetSettingsCfgElem( cfg_file, "Globals" ),
            num_retries := CInt( glob_settings.SpawnRetries ),
            spawn_coords;
            
        if( !num_retries )
                num_retries := 10;
        endif

        var coords := SS_GetRegionCoordinates( region_name ),
            must_check := 1,
            i;
            
        for( i:=0; i<=num_retries; i+=1 )
                spawn_coords := SS_GetSpawnCoords( coords, realm_name );
                if( SS_NPCValidLocation( spawn_coords ))
                        must_check := 0;
                        break;
                endif
                SleepMS(10);
        endfor

        if( must_check )
                // var must_check saves a lot of process for this check...
                if( !SS_NPCValidLocation( spawn_coords ))
                        //SS_ReportText( "Error: Unable to get coords in region ("+region_name+") for spawning.", SPAWN_REPORT_SYSLOG );
                        return 0;
                endif
        endif
                
	var group_entries := SS_GetEntriesInGroup( group_name ).Keys(),
	    spawn_object := group_entries.RandomEntry();

	var near := ListMobilesNearLocation( spawn_coords.x, spawn_coords.y, spawn_coords.z, 3, realm_name );
	if( !near.Size() )
		var created := CreateNPCFromTemplate( spawn_object, spawn_coords.x, spawn_coords.y, spawn_coords.z, 0, realm_name );
		if( created.errortext )
			//SS_ReportText( "Error: Unable to create ("+spawn_object+") from group ("+group_name+") in region ("+region_name+"). ->"+created.errortext, SPAWN_REPORT_SYSLOG );
                        return 0;
		endif
  
		SS_AddSpawnToRegion( region_name, group_name, created );
		AlterNPCModification( region_name, created );
	endif

	return 1;
endprogram

function ValidateSpawns( region_name, group_name )

	var spawns := SS_GetSpawnsInRegionGroup( region_name, group_name );
            
	foreach serial in ( spawns.Keys() )
		SleepMS(10);
  
		var object := SystemFindObjectBySerial( serial );
		if( object.IsA( POLCLASS_NPC ))
			continue;
		endif
  
		SS_RemoveSpawnFromRegion( region_name, group_name, serial );
  
		SleepMS(10);
	endforeach

	return 1;
endfunction

function AlterNPCModification( region_name, creature )

        var region_difficulty := CDbl( SS_GetRegionDifficulty( region_name ));
        
        var ar_mod := CInt( creature.ar );
        if( !ar_mod )
                creature.ar_mod := CInt( region_difficulty * 100 );
        else
                creature.ar_mod := CInt( ar_mod * ( 1 + region_difficulty ));
        endif
        
        var resist_mod := AP_GetSkill( creature, RESISTING_SPELLS );
        if( !resist_mod )
                AP_SetTrueSkill( creature, RESISTING_SPELLS, CInt( region_difficulty * 100 ));
        else
                AP_SetTrueSkill( creature, RESISTING_SPELLS, CInt( resist_mod * ( 1 + region_difficulty )));
        endif
 
	return 1;
endfunction
