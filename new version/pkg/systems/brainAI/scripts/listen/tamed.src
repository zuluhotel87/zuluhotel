/*
        Maintened by *Edwards
        
        2008-11-05

        Last Modifications 2011-07-10
*/
use uo;
use os;

include "include/string";
include ":animaltaming:taming";
include ":brainAI:npcEffects";
include ":brainAI:npcNerves";
include ":brainAI:npcCommands";
include ":brainAI:npcInit";
include ":brainAI:tamedUtil";
include ":gumps:yesno";
include ":timedscripts:timedScripts";
include ":totem:orders";

program BrainNerve( params )

	var npc		:= params[1];
	//var nerve_name:= params[2];
	var event	:= params[3];
	//var settings	:= params[4];
	//var scripts	:= params[5];
	params := 0; // Not needed anymore.

	var text := SplitWords( Lower( event.text )),
	    source := event.source,
            npc_master := npc.master;

        if( source.hidden )
		return 0;
        elseif( source.dead )
		return 0;
        elseif( source.IsA( POLCLASS_NPC ))
		return 0;
        elseif( !npc_master )
		return 0;
        elseif( source != npc_master );
		return 0;
	endif

        AI_Turn( npc, source, NETURN_TOWARD );

        if( !CheckPet( source ))
                StopActivities( npc );
		TS_LowerDuration( npc, "Tame", -1 );
                AI_Speak( npc, "*"+npc.name+" can roam free again*" );
                return 0;
        endif

        SendStatus( source );
        PlaySoundEffect( npc, NPC_GetBarkSound( npc ));
        
        ProcessSpeech( npc, source, text, event );
 
        return 1;
endprogram

function ProcessSpeech( npc, master, command, event )

	if( command[1] == "all" || command[1] == TruncateArticle( npc.name ))

		// Get a target, if we need it
		if( command[3] == "me" )
			command[3] := master;
		endif

		case( command[2] )
			"stop":
				Tamed_Stop( npc );
				break;
			"stay":
				Tamed_Stay( npc );
				break;
			"kill":
			"attack":
				Tamed_Attack( npc, master, event );
				break;
			"release":
                                Tamed_Release( npc );
				break;
                        "come":
			"follow":
				Tamed_Follow( npc, master, command );
				break;
			"guard":
				Tamed_Guard( npc, master, command );
				break;
			"transfer":
				Tamed_Transfer( npc, master, command );
				break;
		endcase
        else
                if( !IsTotem( npc ))
                        return 0;
                elseif( GetObjProperty( npc, "#LastOrder" ) > ReadGameClock() )
                        return 0;
                endif

                SetObjProperty( npc, "#LastOrder", ReadGameClock() + 5 );

                var the_order := Lower( command[1] );

                if( the_order == "help" );
                        Totem_Help( npc );
                elseif( the_order == "loot" )
		        Totem_Loot( npc );
                elseif( the_order == "fetch" || the_order == "get" )
                        Totem_GetItem( npc, master );
                elseif( the_order == "drop" )
                        Totem_DropContainer( npc );
                elseif( the_order == "give" )
                        Totem_GiveLoot( npc, master );
                elseif( the_order == "hide" || the_order == "conceal" )
                        Totem_Hide( npc );
                elseif( the_order == "boost" )
                        if( Totem_GetLevel( npc ) < 7 )
                                return 0;
                        endif

		        Totem_CastSpell( npc, master, 7 ); //reactive armor
		        Totem_CastSpell( npc, master, 9 ); //agility
		        Totem_CastSpell( npc, master, 10 ); //cunning
		        Totem_CastSpell( npc, master, 15 ); //protection
		        Totem_CastSpell( npc, master, 16 ); //strength
		        Totem_CastSpell( npc, master, 17 ); //bless
                elseif( the_order == "heal" )
		        Totem_CastSpell( npc, master, 4 );
                elseif( the_order == "nightsight" || the_order == "nsight" || the_order == "light" )
		        Totem_CastSpell( npc, master, 6 );
                elseif( the_order == "reactivearmor" || the_order == "armor" )
		        Totem_CastSpell( npc, master, 7 );
                elseif( the_order == "agility" )
		        Totem_CastSpell( npc, master, 9 );
                elseif( the_order == "cunning" )
		        Totem_CastSpell( npc, master, 10 );
                elseif( the_order == "cure" )
		        Totem_CastSpell( npc, master, 11 );
                elseif( the_order == "protection" || the_order == "protect" )
		        Totem_CastSpell( npc, master, 15 );
                elseif( the_order == "stength" )
		        Totem_CastSpell( npc, master, 16 );
                elseif( the_order == "bless" )
		        Totem_CastSpell( npc, master, 17 );
                elseif( the_order == "greaterheal" || the_order == "gheal" )
		        Totem_CastSpell( npc, master, 29 );
                elseif( the_order == "reveal" )
		        Totem_CastSpell( npc, master, 48 );
                endif
	endif
 
        return 1;
endfunction

function Tamed_Stop( npc )

	return StopActivities( npc );
endfunction

function Tamed_Attack( npc, master, event )

        if( IsTotem( npc ))
                if( Totem_GetLevel( npc ) < 5 )
                	return 0;
                endif
        endif
                
	var targ := Target( master, TGTOPT_NOCHECK_LOS );
	if( !targ )
		return 0;
	elseif( !targ.IsA( POLCLASS_MOBILE ))
		return 0;
	elseif( targ == targ.master )
		return 0;
	elseif( targ == npc )
		return 0;
        elseif( A_IsIn( targ, AREAS_NO_DAMAGE ))
		return 0;
	endif

	foreach creature in ListMobilesInLineOfSight( master, 20 )
		SleepMS(5);
		if( !creature.IsA( POLCLASS_NPC ))
			continue;
		elseif( creature.master != event.source )
			continue;
		endif

		StopActivities( creature );
                AI_Attack( npc, targ );
	endforeach
 
	return 1;
endfunction

function Tamed_Release( npc )

        if( IsTotem( npc ))
                return 0;
        endif
        
	StopActivities( npc );
 
	TS_LowerDuration( npc, "Tame", -1 );
	AI_Speak( npc, "*"+npc.name+" can roam free again*" );
 
	return 1;
endfunction

function Tamed_Follow( npc, master, command )

        if( IsTotem( npc ))
                command[3] := master;
        endif
        
	if( !command[3] )
		command[3] := Target( master );
		if( !command[3] )
			return 0;
		elseif( !command[3].IsA( POLCLASS_MOBILE ))
			return 0;
		elseif( command[3].IsA( POLCLASS_NPC ))
			return 0;
		endif
	endif

	StopActivities( npc );
 
	AI_Speak( npc, "*following "+command[3].name+"*" );
	StartNerve( npc, "Virtual", ":brainAI:scripts/virtual/follow", array{command[3]} );
                                
	return 1;
endfunction

function Tamed_Guard( npc, master, command )

        if( IsTotem( npc ))
                if( Totem_GetLevel( npc ) < 5 )
                	return 0;
                endif
                command[3] := master;
        endif
                
	if( !command[3] )
		command[3] := Target( master );
		if( !command[3] )
			return 0;
		elseif( !command[3].IsA( POLCLASS_MOBILE ))
			return 0;
		elseif( command[3].IsA( POLCLASS_NPC ))
			return 0;
		endif
	endif

	StopActivities( npc );

	AI_Speak( npc, "*guarding "+command[3].name+"*" );
	StartNerve( npc, "Virtual", ":brainAI:scripts/virtual/guard", array{command[3]} );
 
	return 1;
endfunction

function Tamed_Transfer( npc, master, command )

        if( IsTotem( npc ))
                return 0;
        elseif( GetObjProperty( npc, "SummonedBy" ))
		return 0;
        elseif( !command[3] )
		command[3] := Target( master );
		if( !command[3] )
			return 0;
		elseif( !command[3].IsA( POLCLASS_MOBILE ))
			return 0;
		elseif( command[3].IsA( POLCLASS_NPC ))
			return 0;
		endif
	endif

        if( command[3] == master )
		return 0;
        elseif( !command[3].connected )
		return 0;
	endif
 
	StopActivities( npc );
 
        var npc_cfg := NPC_GetNPCConfig( npc.npctemplate ),
            targ_taming := AP_GetSkill( command[3], ANIMAL_TAMING ),
            requiredTaming := npc_cfg.Taming;

        if(( !requiredTaming || requiredTaming > targ_taming ) && requiredTaming > 65 )
                SendSysMessage( master, command[3].name+" has no chance of controlling this beast!" );
                return 0;
        elseif( !YesNo( command[3], "Accept "+master.name+"'s pet?", "Yes, I do!", "No, I don't!", 10 ))
		SendSysMessage( master, command[3].name+" has not accepted the transfer." );
		return 0;
        endif

        AI_Speak( npc, "*"+npc.name+" accepts "+command[3].name+" as a new master*" );

        TS_LowerDuration( npc, "Tame", -1 );
        Sleep(2);
        tameCreature( npc, command[3] );
 
	return 1;
endfunction

function Tamed_Stay( npc )

        StopActivities( npc );
        SetObjProperty( npc, "Stay", 1 );
        
        return 1;
endfunction
