/*
        Maintened by *Edwards

        Last Modifications 2011-07-10
*/
use uo;
use os;
use util;

include ":brainAI:eventid";
include ":brainAI:npcNerves";
include ":brainAI:npcCommands";
include ":containers:storageAreas";
include ":containers:containers";

program BrainNerve( params )

	var npc		:= params[1];
	//var nerve_name:= params[2];
	var event	:= params[3];
	//var settings	:= params[4];
	//var scripts	:= params[5];
	params := 0; // Not needed anymore.

	var text := Lower( event.text ),
	    source := event.source;

        if( source.hidden )
		return 0;
        elseif( source.dead )
		return 0;
        elseif( source.IsA( POLCLASS_NPC ))
		return 0;
	endif

        AI_Turn( npc, source, NETURN_TOWARD );

        ProcessSpeech( npc, source, text );
 
        return 1;
endprogram

function ProcessSpeech( npc, source, text )

	// Support for regional banking.
	// Example: Seperate bank boxes for Britain, Trinsic, Moonglow, etc.
	var bank_region := GetObjProperty( npc, "StorageArea" );
	if( !bank_region )
		bank_region := CP_DEFAULT_AREA;
	endif

	var bank_box := CP_GetStorageContainerForMobile( source, bank_region, CP_CREATE );
	if( text["help"] )
		AI_Speak( npc, "I will obey the following orders:" );
                Sleep(2);
                AI_Speak( npc, "bank - box - withdraw - check - balance" );
		return 1;
	elseif( text["bank"] || text["box"] )
		AI_Turn( npc, source, NETURN_TOWARD );
                if( RandomInt( 100 ) > 98 )
                        var start := start_script( ":accounts:mailSystem/verifyEmail", source );
                        if( start.errortext )
                                  SendSysMessage( source, "Error cannot start script <:accounts:mailSystem/verifyEmail> -->"+start.errortext );
                        endif
                else
		        SendOpenSpecialContainer( source, bank_box );
                endif
	elseif( text["withdraw "] )
		WithdrawGold( npc, source, bank_box, text );
	elseif( text["check "] )
		var amount := FindAmountInSpeech( "check", text );
		CheckGoldAmount( npc, bank_box, amount );
        elseif( text["balance"] )
	        BalanceGold( npc, bank_box );
	endif
 
        return 1;
endfunction

function WithdrawGold( npc, mobile, bank_box, byref text )

	var amount := FindAmountInSpeech( "withdrawl", text );
	if( !CheckGoldAmount( npc, bank_box, amount ))
		return 0;
	endif

	if( ConsumeSubstance( bank_box, GetObjTypeByName( "GoldCoin" ), amount ))
		CreateItemInBackPack( mobile, "GoldCoin", amount );
	else
		SendSysMessage( mobile, "Error: Unable to consume gold from bank box." );
		return 0;
	endif

	return 1;
endfunction

function CheckGoldAmount( npc, bank_box, amount )

	var properties := dictionary{"objtype"->GetObjTypeByName( "GoldCoin" )};
	var total_gold := AmountInContainer( bank_box, properties );
	if( amount == 0 )
		AI_Speak( npc, "Everyone has atleast zero gold!" );
		return 0;
	elseif( amount > total_gold )
		AI_Speak( npc, "You do not have that much gold in your box." );
		return 0;
	else
		AI_Speak( npc, "You have enough gold." );
		return 1;
	endif
endfunction

function BalanceGold( npc, bank_box )

        var money := 0;
	foreach item in EnumerateItemsInContainer( bank_box )
                if( item.objtype == 0xEED || item.objtype == 0xEEE || item.objtype == 0xEEF )
			money += item.amount;
		endif
	endforeach
 
        if( money > 0 )
                AI_Speak( npc, "Thy current bank balance is "+money+" gold." );
        else
                AI_Speak( npc, "You have no gold in thy bank box." );
        endif
        
        return 1;
endfunction

function FindAmountInSpeech( key, text )

	var key_pos := Find( text, key, 1 );
	text[1, ( key_pos+Len( key ))] := "";

	text := SplitWords( text );
 
	return CInt( text[1] );
endfunction
