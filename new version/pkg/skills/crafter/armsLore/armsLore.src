/*
        Maintened by *Edwards

        2008-10-12
        
        Last Modifications 2008-12-27
             * Cleaned codes
             
        Last Modifications 2009-01-18
             * Modified config and now the codes are perfect :) 2009-07-31: I hope!
             
        Last Modifications 2009-07-31
             * Added useItem_check()
*/
use cfgfile;
use uo;

include ":attributes:attributeConstants";
include ":attributes:attributes";
include ":attributes:skillCheck";
include "include/string";
include ":itemutils:itemdesc";
include "include/itemUtil";

var arms_cfg := ReadConfigFile( ":armslore:arms" );

program skill_Armslore( who )

	SendSysMessage( who, "Select an object to evaluate." );
	var the_item := Target( who, TGTOPT_CHECK_LOS );
	if( !the_item )
                SendSysMessage( who, "Cancelled." );
		return 0;
        elseif( !useItem_check( who, the_item, DEFAULT_ITEM ))
		return 0;
        elseif( !the_item.IsA( POLCLASS_WEAPON ) && !the_item.IsA( POLCLASS_ARMOR ))
		SendSysMessage( who, "You can only use this skill on weapons or armor!" );
		return 0;
	endif

	var item_desc := struct{ condition, physical };

	if( SkillCheck( who, ARMS_LORE, -1 ) > 0 )
		var max_hp := the_item.maxhp,
		    hp := the_item.hp;
                
		if( !hp )
			hp := 1;
		endif
		if( !max_hp )
			max_hp := 1;
		endif

                var item_cond := CInt(( hp  * 100 ) / max_hp );
                HandleSubCondition( item_cond, item_desc );
  
                if( the_item.IsA( POLCLASS_WEAPON ))
                        HandleSubDamage( the_item.damage, item_desc );
                elseif( the_item.isA( POLCLASS_ARMOR ))
                        HandleSubArmor( the_item.ar, item_desc );
                endif
                
                SendSysMessage( who, "This item "+item_desc.physical+" and "+item_desc.condition+"." );
	else
		SendSysMessage( who, "You can't quite tell..." );
	endif

        return 1;
endprogram

function HandleSubCondition( condition_nbr, byref item_desc )

	var condition_elem := arms_cfg["Condition"];
	if( !condition_elem )
		return condition_elem;
	endif

	var phrase_list := GetConfigStringArray( condition_elem, "Condition" );
	foreach entry in ( phrase_list )
		// SplitWords the entry, using a tab as the delimiter.
		var p_array := SplitWords( entry );
		if( condition_nbr < CInt( p_array[1] ))
			item_desc.condition := RemoveSpaces( RemoveFromString( entry, p_array[1] ));
			return 1;
		endif
		SleepMS(2);
	endforeach

	return error{ "errortext":="Could not find condition phrase for level "+condition_nbr };
endfunction

function HandleSubDamage( damage_nbr, byref item_desc )

	var damage_elem := arms_cfg["Damage"];
	if( !damage_elem )
		return damage_elem;
	endif

	var phrase_list := GetConfigStringArray( damage_elem, "Damage" );
	foreach entry in ( phrase_list )
		// SplitWords the entry, using a tab as the delimiter.
		var p_array := SplitWords( entry );
		if( damage_nbr < CInt( p_array[1] ))
			item_desc.physical := RemoveSpaces( RemoveFromString( entry, p_array[1] ));
			return 1;
		endif
		SleepMS(2);
	endforeach

	return error{ "errortext":="Could not find damage phrase for level "+damage_nbr };
endfunction

function HandleSubArmor( armor_nbr, byref item_desc )

	var armor_elem := arms_cfg["Armor"];
	if( !armor_elem )
		return armor_elem;
	endif

	var phrase_list := GetConfigStringArray( armor_elem, "Armor" );
	foreach entry in ( phrase_list )
		// SplitWords the entry, using a tab as the delimiter.
		var p_array := SplitWords( entry );
		if( armor_nbr < CInt( p_array[1] ))
			item_desc.physical := RemoveSpaces( RemoveFromString( entry, p_array[1] ));
			return 1;
		endif
		SleepMS(2);
	endforeach

	return error{ "errortext":="Could not find armor phrase for level "+armor_nbr };
endfunction
