/*
        Maintened by *Edwards

        2008-10-19
        
        Last Modifications 2009-01-18
             * Verifications of the codes
             * Mobile will now face targ

        Last Modifications 2009-07-30
             * Revised code for better performances.
*/
use uo;
use os;

include ":areas:managment";
include ":attributes:attributes";
include ":classes:classes";
include ":musicianship:bard";
include ":brainAI:npcUtil";
include ":brainai:npcCommands";
include ":timedscripts:timedScripts";
include ":brainai:npcCommands";
include "include/facings";

program skill_Provocation( mobile )

        var instrument := CheckInstrument( mobile );
        if( !instrument )
                SendSysMessage( mobile, "You do not have any instruments to play!" );
                return 0;
        elseif( A_IsIn( mobile, AREAS_NO_DAMAGE ))
                SendSysMessage( mobile, "You cannot provoke here!" );
                return 0;
        endif
        
        var range := GetBardRange( mobile );

        SendSysMessage( mobile, "Select the creature you would like to discord." );
        var targ := Target( mobile );
	if( !targ )
                SendSysMessage( mobile, "Cancelled." );
		return 0;
        elseif( !targ.IsA( POLCLASS_NPC ))
		SendSysMessage( mobile, "You must target an NPC!" );
		return 0;
        elseif( !MainCheckTarget( mobile, targ, range ))
                return 0;
	elseif( GetObjProperty( targ, "#Discordance" ))
		SendSysMessage( mobile, targ.name+" is already in discord." );
		return 0;
        elseif( A_IsIn( targ, AREAS_NO_DAMAGE ))
                SendSysMessage( mobile, "You cannot discord "+targ.name+" from here!" );
                return 0;
	endif

        var difficulty := GetMobileDifficulty( mobile, targ );
        if( !difficulty )
                SendSysMessage( mobile, "You cannot discord this creature!" );
                return 0;
        endif
        
        TurnObjectToward( mobile, targ.x, targ.y );

        var sfx_success := instrument.SfxSuccess(),
            sfx_failure := instrument.SfxFaillure();

        if( SkillCheck( mobile, MUSICIANSHIP, difficulty, 0, ADV_DISABLE ) > 0 )
		if( SkillCheck( mobile, DISCORDANCE, -1 ) > 0 )
                        PlaySoundEffect( mobile, sfx_success );
                        PrintTextAbovePrivate( targ, targ.name+"'s strength was surpressed by the song!", mobile );
                        SendDiscordance( mobile, targ, range );
                        return 1;
                endif
        endif

        PlaySoundEffect( mobile, sfx_failure );
        PrintTextAbovePrivate( targ, "You enrage "+targ.name+"!", mobile );
        AI_Attack( targ, mobile );

        return 1;
endprogram

function SendDiscordance( mobile, targ, range )

        var delay := ( RandomInt( 10 ) + 1 ) * ClasseBonus( mobile, BARD );

        SetObjProperty( targ, "#Peacemaking", ReadGameClock() + CInt( delay ));
        targ.warmode := 0;
        
        var armor := CInt( targ.ar ),
            resist := CDbl( AP_GetSkill( targ, RESISTING_SPELLS ));
            
        SetObjProperty( targ, "#Discordance", mobile.serial );
        
        targ.ar := 0;
        AP_SetTrueSkill( targ, RESISTING_SPELLS, 0 );

	Detach();
 
	while( delay > 0 )
		if( mobile.dead || !MainCheckTarget( mobile, targ, range ))
			break;
		endif
  
		Sleep(1);
		delay -= 1;
	endwhile

        EraseObjProperty( targ, "#Peacemaking" );
	EraseObjProperty( targ, "#Discordance" );
        
        targ.ar := armor;
        AP_SetTrueSkill( targ, RESISTING_SPELLS, resist );
        
       	SendSysMessage( mobile, targ.name+" is no longer in discordance." );
 
        return 1;
endfunction
