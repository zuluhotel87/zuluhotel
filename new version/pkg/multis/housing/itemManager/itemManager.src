/*
        Created by *Edwards

        2010-01-26
        
        Last Modifications 2010-01-26
             * Fixed: doors, signs can't be moved.
             
        To-Do:
              - Make check for deeded items do not set movable.
*/
use uo;

include "include/itemUtil";
include ":gumps:gumps";
include ":gumps:gumpprompt";
include ":gumps:yesno";

program UseScript( mobile )

        SetObjProperty( mobile, "#HouseManagerPid", GetPid() );

        while( Send_Command( mobile ))
                SleepMS(5);
        endwhile

        return 1;
endprogram

function Send_Command( mobile )

        //Initialize the gump
        var gump := GFCreateGump();

        //Load Main Background
	GFResizePic( gump, 0, 0, GFGetCfgConst( "Defaults", "BackGround" ), 200, 375 );

        GFResizePic( gump, 15, 15, GFGetCfgConst( "Defaults", "ForeGround" ), 172, 25 );

        //BackgroundAreas
	GFResizePic( gump, 15, 45, GFGetCfgConst( "Defaults", "ForeGround" ), 172, 320 );
        GFAddAlphaRegion( gump, 0, 0, 200, 375 );

	GFTextMid( gump, 15, 17, 205, 1720, "House Managment" );

        GFGumpPic( gump, 80, 110, 2529 );

	GFAddButton( gump, 78, 60, 4500, 4500, GF_CLOSE_BTN, 0xA01 ); //North
	GFAddButton( gump, 115, 70, 4501, 4501, GF_CLOSE_BTN, 0xA02 ); //North-East
	GFAddButton( gump, 125, 110, 4502, 4502, GF_CLOSE_BTN, 0xA03 ); //East
	GFAddButton( gump, 110, 150, 4503, 4503, GF_CLOSE_BTN, 0xA04 ); //Sud-East
	GFAddButton( gump, 78, 160, 4504, 4504, GF_CLOSE_BTN, 0xA05 ); //Sud
	GFAddButton( gump, 40, 150, 4505, 4505, GF_CLOSE_BTN, 0xA06 ); //Sud-West
	GFAddButton( gump, 30, 110, 4506, 4506, GF_CLOSE_BTN, 0xA07 ); //West
	GFAddButton( gump, 40, 70, 4507, 4507, GF_CLOSE_BTN, 0xA08 ); //North-West


	GFAddButton( gump, 30, 220, 5600, 5604, GF_CLOSE_BTN, 0xA09 );
	GFTextLine( gump, 50, 220, 2100, "Unlock Down" );

 	GFAddButton( gump, 30, 240, 5602, 5606, GF_CLOSE_BTN, 0xA10 );
	GFTextLine( gump, 50, 240, 2100, "Lock Down" );

	GFAddButton( gump, 30, 285, 0x4B9, 0x4BA, GF_CLOSE_BTN, 0xA11 );
	GFTextLine( gump, 50, 280, 2100, "Create secure chest" );

	GFAddButton( gump, 30, 305, 0x4B9, 0x4BA, GF_CLOSE_BTN, 0xA12 );
	GFTextLine( gump, 50, 300, 2100, "Destroy secure chest" );

        //And now we need to know the answer...
        var input := GFSendGump( mobile, gump );
        if( !input )
                SendSysMessage( mobile, "Cancelled." );
                return 0;
        elseif( input[0xA01] )
                move_item( mobile, 0, 1 );
        elseif( input[0xA02] )
                move_item( mobile, -1, 1 );
        elseif( input[0xA03] )
                move_item( mobile, -1, 0 );
        elseif( input[0xA04] )
                move_item( mobile, -1, -1 );
        elseif( input[0xA05] )
                move_item( mobile, 0, -1 );
        elseif( input[0xA06] )
                move_item( mobile, 1, -1 );
        elseif( input[0xA07] )
                move_item( mobile, 1, 0 );
        elseif( input[0xA08] )
                move_item( mobile, 1, 1 );
        elseif( input[0xA09] )
                movable_status( mobile, 1 );
        elseif( input[0xA10] )
                movable_status( mobile );
        elseif( input[0xA11] )
                create_securedchest( mobile );
        elseif( input[0xA12] )
                destroy_securedchest( mobile );
        endif

	return 1;
endfunction

function move_item( mobile, y_pos:=0, z_pos:=0 )
         
        var house := mobile.multi,
            house_footprint := house.FootPrint,
            house_minY := CInt( house_footprint.ymin ),
            house_maxY := CInt( house_footprint.ymax );

        SendSysMessage( mobile, "Select the item you would like to move. ( ESC to cancel )" );
        var targ := Target( mobile );
        if( !targ )
                SendSysMessage( mobile, "Cancelled." );
                return 0;
        elseif( !targ.IsA( POLCLASS_ITEM ))
                SendSysMessage( mobile, "You must select an item." );
                return 0;
        elseif( GetObjProperty( targ, "furniture" ))
                SendSysMessage( mobile, "You must redeed to move it." );
                return 0;
        elseif( !targ.multi );
               SendSysMessage( mobile, "That is not in a house!" );
               return 0;
        elseif( !house.CanCommand( mobile ))
               SendSysMessage( mobile, "That is not in your house!" );
               return 0;
        endif

        var new_y := targ.y+y_pos,
            new_z := targ.z+z_pos;
                    
        if( !useItem_check( mobile, targ, ITEM_WILD, 2 ))
                return 0;
        elseif( !CheckLosAt( mobile, targ.x, new_y, new_z ))
                SendSysMessage( mobile, "Couldn't move the item." );
                return 0;
        elseif( new_z < mobile.z || new_z - mobile.z > 15 )
                SendSysMessage( mobile, "Couldn't move the item." );
                return 0;
        elseif( new_y < house_minY || new_y > house_maxY )
                SendSysMessage( mobile, "Couldn't move the item." );
                return 0;
        endif

        var move := MoveObjectToLocation( targ, targ.x, new_y, new_z, targ.realm, MOVEOBJECT_FORCELOCATION );
        if( move.errortext )
                SendSysMessage( mobile, "Couldn't move the item." );
                return 0;
        endif
 
	return 1;
endfunction

function movable_status( mobile, movable:=0 )

        var house := mobile.multi,
            max_locked := house.GetMaxLockDowns(),
            num_locked := CInt( GetObjProperty( mobile.multi, "NumLockDowns" ));

        if( movable )
                SendSysMessage( mobile, "Select the item you would like to unlock down. ( ESC to cancel )" );
        else
                if( num_locked >= max_locked )
                        SendSysMessage( mobile, "You already have the maximum locked down items for this house." );
                        return 0;
                endif
                
                SendSysMessage( mobile, "Select the item you would like to lock down. ( ESC to cancel )" );
        endif

        var targ := Target( mobile );
        if( !targ )
                SendSysMessage( mobile, "Cancelled." );
                return 0;
        elseif( !targ.IsA( POLCLASS_ITEM ))
                SendSysMessage( mobile, "You must select an item." );
                return 0;
        elseif( GetObjProperty( targ, "furniture" ))
                SendSysMessage( mobile, "You must redeed to move it." );
                return 0;
        elseif( !targ.multi );
               SendSysMessage( mobile, "That is not in a house!" );
               return 0;
        elseif( !house.CanCommand( mobile ))
               SendSysMessage( mobile, "That is not in your house!" );
               return 0;
        elseif( targ.IsDoor() || targ.IsSign() || targ.IsSecureChest() || GetObjProperty( targ, "SummonedField" ))
               SendSysMessage( mobile, "You cannot select that items!" );
               return 0;
        endif

        if( movable && targ.movable )
                SendSysMessage( mobile, "Item is already unlocked down." );
                return 0;
        elseif( !movable && !targ.movable )
                SendSysMessage( mobile, "Item is already locked down." );
                return 0;
        endif
                
        targ.movable := movable;
            
        if( movable )
                SendSysMessage( mobile, "The item is now movable." );
                num_locked -= 1;
        else
                SendSysMessage( mobile, "The item is no longer movable." );
                num_locked += 1;
        endif
        
        SetObjProperty( mobile.multi, "NumLockDowns", num_locked );
        
        ReleaseItem( targ );

	return 1;
endfunction

function create_securedchest( mobile )

        var house := mobile.multi,
            max_secure := house.GetMaxSecure(),
            num_secure := CInt( GetObjProperty( mobile.multi, "NumSecure" ));

        if( num_secure >= max_secure )
                SendSysMessage( mobile, "You already have the maximum secured chest(s) for this house." );
                return 0;
        endif
        
        var targ := TargetCoordinates( mobile );
        if( !targ )
               SendSysMessage( mobile, "Cancelled." );
               return 0;
        elseif( !CheckLosAt( mobile, targ.x, targ.y, targ.z ));
               SendSysMessage( mobile, "Can not see that!" );
               return 0;
        elseif( !house );
               SendSysMessage( mobile, "That is not in a house!" );
               return 0;
        elseif( !house.CanCommand( mobile ))
               SendSysMessage( mobile, "That is not in your house!" );
               return 0;
        endif
        
        var text := "Notice: A secured chest can only be used by you, the co-owner and the administrators.";
        GumpPrompt( mobile, text );
        
        var menu := CreateMenu( "Choose an orientation" );
        
        AddMenuItem( menu, 0xE40, "Secured South" );
        AddMenuItem( menu, 0xE41, "Secured East" );
        
        var choice := SelectMenuItem2( mobile, menu );
	if( !choice )
                SendSysMessage( mobile, "Cancelled." );
		return 0;
	endif

        var created := CreateItemAtLocation( targ.x, targ.y, targ.z, 0xe44, 1, targ.realm );
        if( created.errortext )
                SendSysMessage( mobile, "Error creating secured chest -->"+created.errortext );
                return 0;
        endif
        
        created.graphic := choice.objtype;
        
        created.objtype := choice.objtype;
        SetObjProperty( mobile.multi, "NumSecure", num_secure + 1 );
        
	return 1;
endfunction

function destroy_securedchest( mobile )

        var targ := Target( mobile );
        var house := targ.multi;

        if( !targ )
               SendSysMessage( mobile, "Cancelled." );
               return 0;
        elseif( !targ.IsSecureChest() );
               SendSysMessage( mobile, "That is not a secured chest!" );
               return 0;
        elseif( !house.CanCommand( mobile ))
               SendSysMessage( mobile, "That is not in your house!" );
               return 0;
        elseif( !YesNo( mobile, "Are you sure?", "Yes, I want to destroy the secured chest", "No, I do not want do destroy the secured chest" ))
                return 0;
        endif
        
        DestroyItem( targ );
        
        var num_secure := CInt( GetObjProperty( mobile.multi, "NumSecure" ));
        SetObjProperty( mobile.multi, "NumSecure", num_secure - 1 );

	return 1;
endfunction
