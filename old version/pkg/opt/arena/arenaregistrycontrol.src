// ArenaRegistryControl.src
//
// This is the control script for the Arena.   It processes the arena
// fights and the match queue, and it monitors for "interference".

use uo;
use os;
use cfgfile;
use basic;

include "include/client";
include "include/attributes";
include "include/bitwise";
include "include/listex";
include "include/random";

const gpbase:=5;

const UOBJ_CORPSE := 0x2006;


program arenaregistrycontrol(arenacontrol)

// Main Arena Control Loop
//
// First, the arena is cleaned, destroying all Items, killing
// NPCs, and removing players. Then take the next Combat Gladiator
// and opponent, if there is no next fight, wait to start again.
// Otherwise, teh battle starts, until someone dies or disapear(Ex.:logout)


	var i,J;
	var combatents:={};
	var queuelist, opolist, temp1, temp2;

        SetObjProperty(arenacontrol, "InUse", "N");
	while(1)
		if (!arenacontrol)
		  return;
		endif
//		Print("Antes PerformMaintence");
		PerformArenaMaintenance(arenacontrol);
//		Print("Antes GetCombatents");
	        combatents:=GetCombatents(arenacontrol);
//		Print("Combatents:"+Combatents);
		if (!combatents)
//			Print("Antes Sleep");
			sleep(30);
		else
//			Print("Antes Luta");
			FightArenaBattle(arenacontrol, combatents);
		endif
	endwhile
endprogram

function PerformArenaMaintenance(arenacontrol)

	var i, x;
	var arenatopleft := {0,0,0};
	var arenabottomright := {0,0,0};

	var vendorid := GetObjProperty(arenacontrol, "VendorID");
	var cfg := ReadConfigFile("arenaregistry");
	var elem := FindConfigElem(cfg, vendorid);

// Get the bounds of the arena

	arenatopleft[1] := GetConfigInt(elem, "TopX");
	arenatopleft[2] := GetConfigInt(elem, "TopY");
	arenatopleft[3] := GetConfigInt(elem, "TopZ");
	arenabottomright[1] := GetConfigInt(elem, "BottX");
	arenabottomright[2] := GetConfigInt(elem, "BottY");
	arenabottomright[3] := GetConfigInt(elem, "BottZ");

// Take Points Off Glads from PLayers that flee from battle, and didn't loose their Glad Points YET


	var looserlist := GetObjProperty(arenacontrol, "LooserList");

	if (looserlist)
	var sai;
	var temp:={};
	foreach x in looserlist
		sai:=0;
		foreach i in EnumerateOnlineCharacters()
			if (CInt(x) == i.serial)
				sai:=1;
				TakeGps(arenacontrol, i);
				break;
			endif
		endforeach
		if (!sai)
	  		temp[len(temp)+1]:=x;
		endif
	endforeach
	SetObjProperty(arenacontrol, "LooserList", temp);
	endif

// Clear the arena from Players and monsters...

	foreach i in ListObjectsInBox(arenatopleft[1], arenatopleft[2], arenatopleft[3], arenabottomright[1], arenabottomright[2], arenabottomright[3])
		if (i.acctname)
			MoveCharacterToLocation(i, arenacontrol.x, arenacontrol.y + 1, arenacontrol.z);
		endif

		if ( (GetHp(i) >= 0) && (!i.acctname) )
			ApplyRawDamage(i, GetHp(i) + 3);
		endif
	endforeach

// ...and delete items (excluding the corpses).

	foreach i in ListObjectsInBox(arenatopleft[1], arenatopleft[2], arenatopleft[3], arenabottomright[1], arenabottomright[2], arenabottomright[3])
		if (!i.corpseType)
			DestroyItem(i);
		endif
	endforeach

endfunction


function GetCombatents(arenacontrol)
  var i,Y, player;
  var queuelist:=GetObjProperty(arenacontrol, "QueueList");
  var opolist :=GetObjProperty(arenacontrol, "OpoList");
  var combatents:={};
  var who, opo;
  var temp1,temp2;
  if (!queuelist);
    return 0;
  endif
 
  for (I:=1;i<=len(queuelist);i:=i+1);
    who:=0;
    opo:=0;
   
    // Search the Gladiator
    foreach player in EnumerateOnlineCharacters()
      if (CInt(queuelist[i])==player.serial)
     
      	if (!GetObjProperty(player.serial,"ctfloc")>=0)
        who:=player;
        break;
        endif
      endif
    endforeach
    if (!who)
      queuelist[i]:=0;
    endif
   
    // Search for the Oponent
    // If is a Player, see if player is Online
    if (!find(opolist[i], "@", 1))
//    	Print("IS A PLAYER THE OPONENT");
    	foreach player in EnumerateOnlineCharacters()   
      	if (CInt(opolist[i])==player.serial)
     	      	if (!GetObjProperty(player.serial,"ctfloc")>=0)
        	opo:=player;
        	break;
        	endif
      	endif
    	endforeach
      else
//        Print("Is a MONSTER the oponent");
        opo:=opolist[i];
        opo:=opo[2,len(opo)-1];
    endif
   
    if (!opo)
      opolist[i]:=0;   
    endif
   
    // If Found Both, return
    if (who && opo)
      if (!combatents[1])
      	combatents[1]:=who;
      	combatents[2]:=opo;
      	else
      	  temp1[len(temp1)+1]:=queuelist[i];
      	  temp2[len(temp1)+1]:=opolist[i];
      endif;
    endif
  endfor

  queuelist:=temp1;
  opolist:=temp2;
 
  SetObjProperty(arenacontrol,"QueueList",queuelist);
  SetObjProperty(arenacontrol,"OpoList",opolist);
 
  if (combatents)
    SendSysMessage(combatents[1], "You are the next combatent...");
    if (combatents[2].name)
      SendSysMessage(combatents[2], "You are the next combatent...");
    endif
   
    // Send Messages for the next players
    if (len(queuelist))
	for (i := 1; i <= len(queuelist); i := i + 1)
	  y:=i-1;
	  SendSysMessage(CInt(queuelist[i]), "The next fight is starting. There are " + y + " fights ahead.");
	  if (!find(opolist[i],"@",1))
	  	SendSysMessage(CInt(opolist[i]), "The next fight is starting. There are " + y + " fights ahead.");	 
	  endif
	endfor
     endif
  endif
 
  return combatents; 
endfunction

function FightArenaBattle(arenacontrol, combatents)

	var powerlevel, success := 0;
	var x, y, z, difficulty;
	var whoscore, targscore;
	var dx, dy, dz;
	var monsterlevel;

//	Print("Luta na arena:");

	var who:=combatents[1];

//	Print("Who:"+who);

	var opponent:=combatents[2];

	//Print("Opponent:"+Opponent);


	var inuse := GetObjProperty(arenacontrol, "InUse");

	if (inuse == "Y")
		SendSysMessage(who, "The Arena is in use...");
		return;
	endif

	var vendorid := GetObjProperty(arenacontrol, "VendorID");

	// Get Arena Info

	var cfg := ReadConfigFile("arenaregistry");
	var elem := FindConfigElem(cfg, vendorid);

	var destx := GetConfigStringArray(elem, "DestX");
	var desty := GetConfigStringArray(elem, "DestY");
	var destz := GetConfigStringArray(elem, "DestZ");

	var arenatopleft:={};
	var arenabottomright:={};

	arenatopleft[1] := GetConfigInt(elem, "TopX");
	arenatopleft[2] := GetConfigInt(elem, "TopY");
	arenatopleft[3] := GetConfigInt(elem, "TopZ");
	arenabottomright[1] := GetConfigInt(elem, "BottX");
	arenabottomright[2] := GetConfigInt(elem, "BottY");
	arenabottomright[3] := GetConfigInt(elem, "BottZ");


	for(x:=1; x <= len(destx); x:=x+1)
		destx[x] := CInt(destx[x]);
		desty[x] := CInt(desty[x]);
		destz[x] := CInt(destz[x]);
	endfor

	UnloadConfigFile("arenaregistry");


	// See if it's needed to create an oponent(NPC)
	if (!opponent.serial)

		cfg := ReadConfigFile("arenaregistry");
		elem:=FindConfigElem(cfg,opponent);
	
		var monsterlist:=GetConfigStringArray(elem, "Monster");
	
//		Print("Eh um oponente NPC");

		if (len(monsterlist) < 1)
			SendSysMessage(who, "Error Creating Monster. There are no Monsters of This Level");
			SendSysMessage(who, "MonsterList: " + monsterlist);
			return;
		endif
	
		x := Random( len(destx) ) + 1;
		y := Random( len(monsterlist) ) + 1;
	
		monsterlevel:=CInt(opponent);
		opponent := CreateNpcFromTemplate(monsterlist[y], destx[x], desty[x], destz[x]);
		opponent.noloot:=1;
		SetObjProperty(opponent, "guardkill", 1);
		if (!opponent)
			SendSysMessage(who, "Error creating monster...page a GM at once.");
			SendSysMessage(who, "MonsterList = " + monsterlist);
			SendSysMessage(who, "Monster = " + monsterlist[y]);
			return;
		endif
	
//		Print("NPC Criado!");
		UnloadConfigFile("arenaregistry");
	
		else
			// Oponent Is an Player
		  	x := Random( len(destx) ) + 1;
			SendSysMessage(opponent, "Prepare yourself...");
			MoveCharacterToLocation(opponent, destx[x], desty[x], destz[x]);		
	endif

	repeat
		y := Random( len(destx) ) + 1;
	until (y!=x);

	MoveCharacterToLocation(who, destx[y], desty[y], destz[y]);
	SendSysMessage(who, "Prepare yourself...");

	success := 0;
	SetObjProperty(arenacontrol, "InUse", "Y");
	var gain;
	while (success == 0)
		// Stop battle IF Opponent: is dead, logged out or is outside of the arena
		if ( (opponent.dead) || (!opponent) || (!PlayerInside(opponent, arenatopleft,arenabottomright)) )
			SendSysMessage(who, "You have fought well.");
			if (opponent.acctname)
				SendSysMessage(opponent, "Maybe next time.");			
				gain:=TakeGps(arenacontrol, opponent);
				MoveCharacterToLocation(opponent, arenacontrol.x - 1, arenacontrol.y, arenacontrol.z);
				else
				  gain:=exp(gpbase,monsterlevel);
			endif
			GrantGps(arenacontrol, who,gain);
		
			sleep(20);			
			MoveCharacterToLocation(who, arenacontrol.x - 1, arenacontrol.y, arenacontrol.z);
			success := 1;
		elseif ( (who.dead) || (!who) || (!PlayerInside(who, arenatopleft,arenabottomright)) )
			SendSysMessage(who, "Maybe next time.");			
			gain:=TakeGps(arenacontrol,who);
			if (opponent.acctname)
				SendSysMessage(opponent, "You have fought well.");
				GrantGps(arenacontrol, opponent,gain);
				MoveCharacterToLocation(opponent, arenacontrol.x - 1, arenacontrol.y, arenacontrol.z);			
				else
				  ApplyRawDamage(opponent,GetHp(opponent)+3);
			endif
			MoveCharacterToLocation(who, arenacontrol.x - 1, arenacontrol.y, arenacontrol.z);
			sleep(20);					
			success := 1;
		endif
		sleep(20);
	endwhile
	SetObjProperty(arenacontrol, "InUse", "N");

endfunction

// Checks If Player is in a Box
function PlayerInside(player, topleft, botright)
 
  if (player.x >= topleft[1] && player.x <= botright[1])
    // X Pos Is OK
    if (player.y >= topleft[2] && player.y <= botright[2])
      // X AND Y Pos are OK, so he is IN the Box
      return 1;
      else
        return 0;
    endif
    else
      return 0;
  endif
 
endfunction


// This function takes 10% of players "who" GladPoints
function TakeGps(arenacontrol, who)
  //If Player is Offline, then add him to LooserList
  if (!who)
	var looserlist := GetObjProperty(arenacontrol, "LooserList");
	if (!looserlist)
	  looserlist:={};
	endif
	looserlist[len(looserlist+1)]:=who.serial;
	SetObjProperty(arenacontrol, "LooserList", looserlist);
	return 5;

	else //Player IS Online
  		var GP:=CInt(GetObjProperty(who,"GladPoints"));
  		if (!GP)
    			GP:=0;
  		endif
  		SendSysMessage(who,"You have lost some Gladiator Points");
  		var loss:=CInt(GP*0.1);
  		GP:=GP-loss;
  		if (GP<0)
    			GP:=0;
  		endif
  		SendSysMessage(who,"You have now "+GP+" GPs");
  		SetObjProperty(who,"GladPoints",GP);
  		UpdateTOP10List(arenacontrol, who);
 		return loss;
 endif
endfunction

// This gives, "number" GladPoitns to the player "who"
function GrantGps(arenacontrol, who, number);
  var GP:=CInt( GetObjProperty(who,"GladPoints") );
  if (!GP)
    GP:=0;
  endif 
  SendSysMessage(who,"You earn some Gladiator Points");
  GP:=GP+number;
  SendSysMessage(who,"You have now "+GP+" GPs");
  SetObjProperty(who,"GladPoints",GP);
 
  UpdateTOP10List(arenacontrol, who);
 
  return 0;
endfunction


function UpdateTOP10List(arenacontrol, who);

	var whoscore := CInt( GetObjProperty(who, "GladPoints") );

	var top10 array;
	top10.+Name:={};
	top10.+Score:={};
	top10.+Serial:={};

	var temparray, temp, i,k;

	//Incialize Variables
	for (i:=1;i<=10;i:=i+1)
	  top10.Name[i]:="";
	  top10.Score[i]:=0;
	  top10.Serial[i]:=0;
	endfor

//	Print("Scores:"+Top10.Score);
//	Print("Names:"+Top10.Name);
//	Print("Serials:"+Top10.serial);

	//Take Names, Serial and Scores  of the Actual TOP 10 List
	top10.Name:=GetObjProperty(arenacontrol,"Names");
//	Print("Top10.Name:"+Top10.Name);

	top10.Serial:=GetObjProperty(arenacontrol,"PlayerSerials");
//	Print("Top10.Serial:"+Top10.Serial);

	//Take Scores of the Actual TOP 10 List	
	top10.Score:=GetObjProperty(arenacontrol,"Scores");
//	Print("Top10.Score:"+Top10.Score);

	if (top10.Name=="NONE")
	    top10.Name:={};
	    top10.Serial:={};
	    top10.Score:={};
	    for (i:=1;i<=10;i:=i+1)
	      top10.Name[i]:="";	   
	      top10.Serial[i]:=0;	     
	      top10.Score[i]:=0;	     
	    endfor
	endif

//	Print("Scores:"+Top10.Score);
//	Print("Names:"+Top10.Name);
//	Print("Seirals:"+Top10.Serial);	

	//See is player is already in list

	for (i:=1;i<=10;i:=i+1);
	  //If player in the list, update his info
	  if (top10.Serial[i]==CInt(who.serial))
	    top10.Score[i]:=whoscore;
	    top10.Name[i]:=who.name;
	    break;
	  endif
	endfor


	if (i>10) // Player is Not in List
	  // See if there's a Free Space in the list
//	   Print("Not in List");	  
	  for (i:=1;i<=10;i:=i+1);
	    if (!top10.serial[i]);
	      top10.serial[i]:=who.serial;
	      top10.name[i]:=who.name;
	      top10.score[i]:=whoscore;
	      break;
	    endif
	  endfor
//	  Print("Names:"+Top10.Name); 
//	  Print("Scores:"+Top10.Score);	  
	  top10:=SortTop10(TOP10);
//	  Print("Scores:"+Top10.Score);
	 
	  // If Player ISN'T in The list, but has a score bigger than the someone in the list
	  // Add him to the list and sort the list again
	  if ( (top10.score[10]<whoscore) && (i>10))
	      TOP10.serial[10]:=who.serial;
	      TOP10.name[10]:=who.name;
	      TOP10.score[10]:=whoscore;
	      top10:=SortTop10(top10);
	  endif
	  else // Player is In List
//	    Print("In List");
	    top10:=SortTop10(top10);
	endif

	SetObjProperty(arenacontrol,"Names", top10.Name);
	SetObjProperty(arenacontrol,"Scores", top10.Score);
	SetObjProperty(arenacontrol,"PlayerSerials", top10.Serial);	
endfunction

//Sorts Top10 Array
function SortTop10(top10);
  var limit :=9;
  var changed;
  var i;
  var aux;
  repeat
    changed:=0;
    for (i:=1;i<=limit;i:=i+1)
      if (top10.Score[i]<top10.Score[i+1])
     
        aux:=top10.Score[i];
        top10.Score[i]:=top10.Score[i+1];
        top10.Score[i+1]:=aux;

        aux:=top10.Name[i];
        top10.Name[i]:=top10.Name[i+1];
        top10.Name[i+1]:=aux;
       
        aux:=top10.Serial[i];
        top10.Serial[i]:=top10.Serial[i+1];
        top10.Serial[i+1]:=aux;
               
        limit:=i;
        changed:=1;
      endif
    endfor
  until (!changed);
  return top10;
endfunction