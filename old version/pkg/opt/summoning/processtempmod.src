use uo;
use os;


include "include/spelldata";
include "include/attributes";
include "include/dotempmods";

program processtempmods( parms )

	set_script_option( SCRIPTOPT_CAN_ACCESS_OFFLINE_MOBILES, 1 );

	var who	:= parms[1];
	var stat	:= parms[2];
	var amt	:= CInt(parms[3]);
	var duration	:= CInt(parms[4]);




	Detach();

	if( (!who.poisoned) )
		// this person should not be poisoned
		if ( GetHpRegenRate(who) != BaseRegenRate(who) )
			SetHpRegenRate(who , ( BaseRegenRate(who)) * 12);
			who.setPoisoned(0);
		endif
	endif

	set_critical(1);
	var allmods	:= GetObjProperty( who, "#mods" );
	if (!allmods)
		allmods := {};
	endif

	var mmod := {};
	mmod[1] := stat;
	mmod[2] := amt;
	mmod[3] := ReadGameClock() + duration;

	var pos := AddToStatMods( allmods, mmod );
	if( !pos )
		return;
	endif

	// Gets the lowest effective attribute, and returns the new mod amount based on that. Will never go below 1.
	var modamt := mmod[2];

/*

	if ((mmod[1] == "call") || (mmod[1] == "all") || (mmod[1] == "cpoly") || (mmod[1] == "poly"))
		var orig_str := GetBaseStrength(who) + GetStrengthMod(who);
		var orig_dex := GetBaseDexterity(who) + GetDexterityMod(who);
		var orig_int := GetBaseIntelligence(who) + GetIntelligenceMod(who);

		if (orig_str <= orig_dex)
			if (orig_str <= orig_int)
				modamt := fixMod(GetBaseStrength(who), GetStrengthMod(who), mmod[2]);
			else
				modamt := fixMod(GetBaseIntelligence(who), GetIntelligenceMod(who), mmod[2]);
			endif;
		else
			if (orig_dex <= orig_int)
				modamt := fixMod(GetBaseDexterity(who), GetDexterityMod(who), mmod[2]);
			else
				modamt := fixMod(GetBaseIntelligence(who), GetIntelligenceMod(who), mmod[2]);
			endif;
		endif
	endif
*/
	
	

	case( mmod[1] )
		"cstr":
        	"str" :	AlterStrengthMod(who,  modamt);
				break;
        
		"cdex":
        	"dex" : 	AlterDexterityMod(who, modamt );
				break;
        
		"cint":
        	"int" : 	AlterIntelligenceMod(who, modamt );
				break;
        
		"car":
        	"ar"  :	who.ar_mod := who.ar_mod + mmod[2];
				break;
        
		"p"   :	who.setParalyzed();
				break;
	
		"call":
        	"all" :	AlterStrengthMod(who, modamt );
				AlterDexterityMod(who, modamt );
				AlterIntelligenceMod(who, modamt );
				break;
		
		"cpoly":
		"poly":	AlterStrengthMod(who, modamt);
				AlterDexterityMod(who, modamt);
				AlterIntelligenceMod(who, modamt);
				who.ar_mod := who.ar_mod + CInt(mmod[2] / 3 );
	endcase

	allmods[pos][2] := mmod[2]; // Overwrite old mod in case it was changed while checking for minimum values.

	SetObjProperty( who, "#mods", allmods );
	set_critical(0);

	sleep(duration);

	if( who )
		set_critical(1);
		allmods := GetObjProperty( who, "#mods" );

		if( !allmods )
			set_critical( 0 );
			return;
		endif

		var newmods := {};
		var i;
		for( i := 1; i <= len(allmods); i := i + 1 )
			if( allmods[i][1] == mmod[1] && ReadGameClock() >= allmods[i][3] )
				UndoTheMod( who, allmods[i][1], allmods[i][2] );
			else
				newmods.append( allmods[i] );
			endif
		endfor

		if( len(newmods) )
			SetObjProperty( who, "#mods", newmods );
		else
			EraseObjProperty( who, "#mods" );
		endif

		set_critical( 0 );
	endif

endprogram

function fixMod(baseattr, originalmod, byref newmod)
	if ((baseattr + originalmod + newmod) < 1)
		newmod := 1 - (baseattr + originalmod);
		return -(baseattr-1);
	endif
	return (originalmod + newmod);
endfunction