/////////////////////////////////////////////////////////////////////////////
//
//  spellpcs.src: spell caster AI
//
//
//  Author: DCT, stealing most from ENS's killpc.src
//
//  Created: 6/98

//
/////////////////////////////////////////////////////////////////////////////

use npc;
use os;
use uo;
use cfgfile;

include "include/myutil";
include "include/attributes";
include "include/npcbackpacks";

include "include/eventid";
include "include/randname";
include "include/npcutil";
include "include/objtype";
include "include/npccast";
include "include/anchors";
include "ai/main/killpcsloop";
include "ai/combat/fight";
include "ai/combat/spellcombatevent";
include "ai/setup/spellsetup";
include "ai/setup/modsetup";
include "ai/main/loot";
include "ai/main/sleepmode";

const HALT_THRESHOLD := 8; // how close before he attacks?

var runaway := 0;

program KillPlayers()

	if (GetObjProperty(me, "frozen"))
		me.frozen := 1;
	endif

	SetWarMode( 0 );
      
	main_AI_loop();

endprogram

/////////////////////////////////////////////////////////////////////////////
//
//  These types fight singlemindedly, until the quarry is dead.
//  There is no way out but death.
//
/////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////
//
//  CloseDistance - close the distance between self and an opponent.
//  Returns: 1 if distance is 0 or 1 (no move necessary)
//           0 if distance is >= 2 (may still need to move)
//
//  This is a .EM-file candidate.
//
/////////////////////////////////////////////////////////////////////////////
function CloseDistance( opponent )

//	return 1 if we DON'T need to move
//	return 0 if we DO need to move

  var sleepdelay := 300 - (CInt(GetDexterity(me)) * 1.5);
  if (sleepdelay < 0) sleepdelay := 0; endif

	var d:=Distance(me,opponent);
	if ( d > 10 )
		WalkToward( opponent );
		sleepms(sleepdelay);
		return 0;
	endif

    case d
        1:              // the most likely, so first 
        0:
		if ( runaway < 15 )
			if (GetMana(me) > (GetMaxMana(me)/3))
				RunAwayFrom( opponent );
				sleepms(sleepdelay);
				return 3;
			endif
			runaway := runaway + 1;
			if (runaway == 15)
				TurnToward( opponent );
			endif
		endif
            	return 1;
	default:
		runaway := 0;
		if (GetMana(me) < (GetMaxMana(me)/3))
			WalkToward( opponent );
			sleepms(sleepdelay);
			return 0;
		elseif (!CheckLineOfSight( me, opponent) )
			if (runrandom(opponent))
			sleepms(sleepdelay);
				return 2;
			endif
		else
			spellattack(opponent);
		endif
		return 1;
    endcase

endfunction
